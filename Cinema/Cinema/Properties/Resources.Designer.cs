//------------------------------------------------------------------------------
// <auto-generated>
//     Ten kod został wygenerowany przez narzędzie.
//     Wersja wykonawcza:4.0.30319.42000
//
//     Zmiany w tym pliku mogą spowodować nieprawidłowe zachowanie i zostaną utracone, jeśli
//     kod zostanie ponownie wygenerowany.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Cinema.Properties {
    using System;
    
    
    /// <summary>
    ///   Klasa zasobu wymagająca zdefiniowania typu do wyszukiwania zlokalizowanych ciągów itd.
    /// </summary>
    // Ta klasa została automatycznie wygenerowana za pomocą klasy StronglyTypedResourceBuilder
    // przez narzędzie, takie jak ResGen lub Visual Studio.
    // Aby dodać lub usunąć składową, edytuj plik ResX, a następnie ponownie uruchom narzędzie ResGen
    // z opcją /str lub ponownie utwórz projekt VS.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        /// Zwraca buforowane wystąpienie ResourceManager używane przez tę klasę.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Cinema.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Przesłania właściwość CurrentUICulture bieżącego wątku dla wszystkich
        ///   przypadków przeszukiwania zasobów za pomocą tej klasy zasobów wymagającej zdefiniowania typu.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu --basic version : util-only
        ///
        ///CREATE TABLE Genres (
        ///	id INT IDENTITY(1,1) PRIMARY KEY,
        ///	genre VARCHAR(50) NOT NULL
        ///);
        ///
        ///CREATE TABLE Movies (
        ///	id INT IDENTITY(1,1) PRIMARY KEY,
        ///	title VARCHAR(50) NOT NULL
        ///);
        ///
        ///CREATE TABLE Tags (
        ///	movieID INT REFERENCES Movies(id),
        ///	genreID INT REFERENCES Genres(id),
        ///
        ///	PRIMARY KEY (movieID, genreID)
        ///);
        ///
        ///CREATE TABLE Auditoriums (
        ///	id INT PRIMARY KEY
        ///);
        ///
        ///CREATE TABLE Seats (
        ///	id INT IDENTITY(1,1) PRIMARY KEY,
        ///	auditoriumID INT REFERENCES Auditoriums(id) [obcięto pozostałą część ciągu]&quot;;.
        /// </summary>
        internal static string CreateTables {
            get {
                return ResourceManager.GetString("CreateTables", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu create   procedure procedure_GetMoviesByGenre 
        ///	@genre varchar(100)
        ///as
        ///	select distinct movies.title 
        ///		from Tags, Genres, 
        ///		(select Movies.id, Movies.title as title from Movies, Screenings where Movies.id = Screenings.movieID and Screenings.screeningDate = CONVERT(date,  GETDATE())) movies
        ///		where	Genres.id = Tags.genreID and 
        ///				Tags.movieID = movies.id and Genres.genre = @genre;
        ///.
        /// </summary>
        internal static string GetMoviesByGenre {
            get {
                return ResourceManager.GetString("GetMoviesByGenre", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu INSERT INTO Genres(genre) VALUES (&apos;Film akcji&apos;); 
        ///INSERT INTO Genres(genre) VALUES (&apos;Komedia&apos;); 
        ///INSERT INTO Genres(genre) VALUES (&apos;Romans&apos;); 
        ///INSERT INTO Genres(genre) VALUES (&apos;Film animowany&apos;); 
        ///INSERT INTO Genres(genre) VALUES (&apos;Horror&apos;); 
        ///INSERT INTO Genres(genre) VALUES (&apos;Film dokumentalny&apos;); 
        ///
        ///INSERT INTO Movies(title) VALUES (&apos;World War Z&apos;); 
        ///INSERT INTO Movies(title) VALUES (&apos;Underworld&apos;); 
        ///INSERT INTO Movies(title) VALUES (&apos;Shrek&apos;); 
        ///INSERT INTO Movies(title) VALUES (&apos;Potwory i spółka&apos;);  [obcięto pozostałą część ciągu]&quot;;.
        /// </summary>
        internal static string Inserts {
            get {
                return ResourceManager.GetString("Inserts", resourceCulture);
            }
        }
        
        /// <summary>
        /// Wyszukuje zlokalizowany ciąg podobny do ciągu create   procedure procedure_MostPopularMovies 
        ///as
        ///	select tt.title 
        ///		from (select distinct Movies.title as title, t.all_tickets as tickets
        ///			from (
        ///				select Movies.id as all_id, count(Tickets.id) as all_tickets
        ///					from Tickets, Screenings, Movies
        ///					where	Tickets.screeningID = Screenings.id and 
        ///							Screenings.movieID = Movies.id
        ///					group by Movies.id) t, Movies, Screenings
        ///			where all_id = Movies.id and Screenings.movieID = all_id and
        ///			Screenings.screeningDate = CONVERT(date,  G [obcięto pozostałą część ciągu]&quot;;.
        /// </summary>
        internal static string MostPopularMovies {
            get {
                return ResourceManager.GetString("MostPopularMovies", resourceCulture);
            }
        }
    }
}
